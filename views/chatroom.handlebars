<div id="chatroom-container" class="flex flex-col w-full mx-5">
    <div class="relative text-center py-2 bg-zinc-900/40">
        <a href="/" class="flex absolute h-[calc(100%-16px)] left-2 items-center gap-x-1 text-zinc-200 hover:text-zinc-200/80 transition-all">
            <i class="fa-solid fa-caret-left"></i>
            <span class="text-[16px]">Back</span>
        </a>
        {{ chatroom.name }}
        <div class="flex absolute items-center h-full right-2 top-0">
            <div class="relative">
                <div class="chatroom-info" data-owner="{{chatroom.owner.display_name}}" data-timestamp="{{date chatroom.created_at}}">
                    <i class="fa-solid fa-circle-info"></i>
                </div>
            </div>
        </div>
    </div>

    <div class="flex flex-col bg-zinc-900/20 h-full rounded-sm min-h-0">
        <div id="chat-messages" class="flex flex-col-reverse flex-grow py-1 overflow-y-scroll shadow-inner">
            {{#if chatroom.messages.length}}
                {{#each chatroom.messages}}
                    <div class="flex">
                        <div class="flex px-2">
                            <a href="/profile/{{author.id}}" style="color: #{{author.name_color}}">{{ author.display_name }}: </a>
                        </div>
                        <span>{{ message }}</span>
                    </div>
                {{/each}}
            {{else}}
                <div class="text-center w-full py-2 select-none">
                    <h2 class="text-[16px]">No messages yet</h2>
                </div>
            {{/if}}
        </div>
        <input id="chat-input" class="h-10 bg-zinc-900/20 pl-3 border-t border-zinc-900 shrink-0" disabled placeholder="Message {{chatroom.name}}"></input>
    </div>
</div>

<script>
    let ws = null;
    const env = "{{ environment }}";
    if (env === "development") {
        ws = new WebSocket(
        `ws://localhost:3001/ws/chatroom/{{ chatroom.id }}`);
    } else {
        ws = new WebSocket(
        `wss://${location.hostname}/ws/chatroom/{{ chatroom.id }}`);
    }

    const chatroom_id = {{{json chatroom.id}}};
    const messages = {{{json chatroom.messages}}};

    let isManualScrolling = false;

    document.addEventListener("DOMContentLoaded", async () => {
        const chatInput = document.querySelector("#chat-input");

        const access_token = localStorage.getItem("access_token");
        if (access_token) {
            chatInput.attributes.removeNamedItem("disabled");

            chatInput.addEventListener("keydown", (event) => {
                if (event.key === "Enter") {
                    const wsRequest = { action: "new-message", message: chatInput.value, chatroom_id, access_token };

                    ws.send(JSON.stringify(wsRequest));
                    chatInput.value = "";
                }
            });
        } else {
            chatInput.placeholder = "Login to send messages";
        }

        const rawTemplate = await fetch("/templates/messages.handlebars");
        const templateSrc = await rawTemplate.text();
        const template = Handlebars.compile(templateSrc);

        const chatMessages = document.getElementById("chat-messages");
        ws.onmessage = (event) => {
            const incoming = JSON.parse(event.data);
            if (!incoming || incoming?.action !== "new-message" || !incoming?.data?.author?.display_name || !incoming?.data?.message) {
                return;
            }

            messages.unshift({ author: incoming.data.author, message: incoming.data.message, name_color: incoming.data.author.name_color});

            const compiled = template({ messages });
            chatMessages.innerHTML = compiled;

            scrollToBottom()
        };

        chatMessages.addEventListener("scroll", (e) => {
            isManualScrolling = true;
        });

        scrollToBottom()
    });

    ws.onopen = (event) => {
        console.log("Waiting for new messages...")
    };

    ws.onclose = (event) => {
        console.log("WebSocket is closed now.");
    };

    ws.onerror = (event) => {
        console.log("WebSocket has encountered an error.");
    };

    async function scrollToBottom() {
        const chatMessages = document.getElementById("chat-messages");
        if (isManualScrolling) {
            const newestMessage = chatMessages.children[0];
            const fixedPosition = chatMessages.scrollTop - newestMessage.clientHeight
            chatMessages.scrollTo(0, fixedPosition)
            return;
        }

        chatMessages.scrollBottom = chatMessages.scrollHeight - chatMessages.clientHeight;
    }
</script>